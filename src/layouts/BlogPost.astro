---
import Layout from './Layout.astro';
import Section from '@/ui/Section.astro';
import Container from '@/ui/Container.astro';
import Heading from '@/ui/Heading.astro';
import Text from '@/ui/Text.astro';
import Button from '@/ui/Button.astro';
import { t } from '@/utils/i18n.js';
import type { CollectionEntry } from 'astro:content';


export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, author, pubDate, updatedDate, heroImage, tags } = post.data;

const backToText = {
  pl: "Wróć do bloga",
  en: "Back to blog"
};

const byAuthorText = {
  pl: "Autor:",
  en: "By:"
};

const publishedText = {
  pl: "Opublikowano:",
  en: "Published:"
};

const updatedText = {
  pl: "Zaktualizowano:",
  en: "Updated:"
};

const formattedPubDate = pubDate.toLocaleDateString('pl-PL', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

const formattedUpdatedDate = updatedDate?.toLocaleDateString('pl-PL', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Handle image optimization for known images
const getOptimizedImage = (imagePath: string) => {
  if (imagePath === '/img-6.jpg') {
    return '/img-6.jpg';
  }
  return null;
};

const optimizedImage = heroImage ? getOptimizedImage(heroImage) : null;
---

<Layout title={t(title)}>
  <!-- Blog Navigation -->
  <Section mode="light" padding="sm">
    <div class="mb-8">
      <Button href="/blog">
        {t(backToText)}
      </Button>
    </div>
  </Section>

  <!-- Hero Image -->
  {heroImage && (
    <Section mode="light" padding="none">
      <div class="aspect-video w-full overflow-hidden rounded-lg">
        <img
          src={optimizedImage || heroImage}
          alt={t(title)}
          class="h-full w-full object-cover"
          loading="eager"
        />
      </div>
    </Section>
  )}

  <!-- Article Header -->
  <Section mode="light" padding="md">
    <div class="max-w-4xl mx-auto text-center">
      <Heading level={1} isMb>
        {t(title)}
      </Heading>
      
      <Text size="lg" type="light" class="mb-8">
        {t(description)}
      </Text>
      
      <!-- Meta Information -->
      <div class="flex flex-wrap items-center justify-center gap-4 text-sm mb-8" style="color: var(--text-light);">
        <span>{t(byAuthorText)} {author}</span>
        <span>•</span>
        <time datetime={pubDate.toISOString()}>
          {t(publishedText)} {formattedPubDate}
        </time>
        {updatedDate && (
          <>
            <span>•</span>
            <time datetime={updatedDate.toISOString()}>
              {t(updatedText)} {formattedUpdatedDate}
            </time>
          </>
        )}
      </div>
      
      <!-- Tags -->
      {tags.length > 0 && (
        <div class="flex flex-wrap justify-center gap-2 mb-8">
                     {tags.map((tag: string) => (
            <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium" style="background-color: var(--u-gray-100); color: var(--text);">
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>
  </Section>

  <!-- Article Content -->
  <Section mode="light-gray">
      <div class="prose prose-lg max-w-none">
        <slot />
      </div>
  </Section>
</Layout>

<style>
  /* Rich Text Prose Styling */
  .prose {
    color: var(--text);
    line-height: 1.7;
    font-family: 'Geomanist', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    max-width: none;
  }
  
  /* Headings */
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    color: var(--text);
    font-family: inherit;
    font-weight: 500;
    line-height: 1.25;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    letter-spacing: -0.015em;
  }
  
  .prose h1 {
    font-size: 2.25rem;
    font-weight: 600;
    margin-top: 0;
  }
  
  .prose h2 {
    font-size: 1.875rem;
    border-bottom: 2px solid var(--separator);
    padding-bottom: 0.75rem;
    margin-bottom: 1.5rem;
    margin-top: 3rem;
  }
  
  .prose h3 {
    font-size: 1.5rem;
    margin-top: 2rem;
  }
  
  .prose h4 {
    font-size: 1.25rem;
    margin-top: 1.5rem;
  }
  
  .prose h5 {
    font-size: 1.125rem;
    margin-top: 1.5rem;
  }
  
  .prose h6 {
    font-size: 1rem;
    margin-top: 1.5rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  /* Paragraphs */
  .prose p {
    margin-bottom: 1.5rem;
    font-size: 1.125rem;
    line-height: 1.7;
  }
  
  .prose p:first-of-type {
    font-size: 1.25rem;
    color: var(--text-light);
    margin-bottom: 2rem;
  }
  
  /* Lists */
  .prose ul,
  .prose ol {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }
  
  .prose ul {
    list-style-type: none;
  }
  
  .prose ul > li {
    position: relative;
    margin-bottom: 0.75rem;
    padding-left: 1rem;
  }
  
  .prose ul > li::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.6em;
    width: 6px;
    height: 6px;
    background-color: var(--primary);
    border-radius: 50%;
  }
  
  .prose ol {
    list-style-type: decimal;
  }
  
  .prose ol > li {
    margin-bottom: 0.75rem;
    padding-left: 0.5rem;
  }
  
  .prose li {
    font-size: 1.125rem;
    line-height: 1.6;
  }
  
  .prose li p {
    margin-bottom: 0.5rem;
  }
  
  /* Nested lists */
  .prose ul ul,
  .prose ul ol,
  .prose ol ul,
  .prose ol ol {
    margin: 0.5rem 0;
  }
  
  /* Text formatting */
  .prose strong {
    font-weight: 600;
    color: var(--text);
  }
  
  .prose em {
    font-style: italic;
  }
  
  .prose mark {
    background-color: var(--u-light-blue);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }
  
  /* Links */
  .prose a {
    color: var(--primary);
    text-decoration: underline;
    text-decoration-color: var(--primary);
    text-underline-offset: 0.25rem;
    transition: all 0.2s ease;
  }
  
  .prose a:hover {
    color: var(--text);
    text-decoration-color: var(--text);
  }
  
  /* Blockquotes */
  .prose blockquote {
    border-left: 4px solid var(--primary);
    padding: 1.5rem 0 1.5rem 2rem;
    margin: 2rem 0;
    font-style: italic;
    color: var(--text-light);
    background-color: var(--u-gray-100);
    border-radius: 0 0.5rem 0.5rem 0;
    position: relative;
  }
  
  .prose blockquote::before {
    content: '"';
    position: absolute;
    top: 0.5rem;
    left: 1rem;
    font-size: 3rem;
    color: var(--primary);
    font-family: serif;
    line-height: 1;
  }
  
  .prose blockquote p {
    margin-bottom: 0.75rem;
    font-size: 1.125rem;
  }
  
  .prose blockquote p:last-child {
    margin-bottom: 0;
  }
  
  /* Horizontal rules */
  .prose hr {
    border: none;
    border-top: 2px solid var(--separator);
    margin: 3rem 0;
    width: 50%;
    margin-left: auto;
    margin-right: auto;
  }
  
  /* Code */
  .prose code {
    background-color: var(--u-gray-100);
    color: var(--text);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.875em;
    font-family: 'SF Mono', Monaco, Inconsolata, 'Roboto Mono', monospace;
    border: 1px solid var(--card-border);
  }
  
  .prose pre {
    background-color: var(--u-gray-100);
    color: var(--text);
    padding: 1.5rem;
    border-radius: 0.75rem;
    overflow-x: auto;
    margin: 2rem 0;
    border: 1px solid var(--card-border);
    font-family: 'SF Mono', Monaco, Inconsolata, 'Roboto Mono', monospace;
    line-height: 1.6;
  }
  
  .prose pre code {
    background: none;
    padding: 0;
    border: none;
    color: inherit;
    font-size: 0.875rem;
  }
  
  /* Tables */
  .prose table {
    width: 100%;
    margin: 2rem 0;
    border-collapse: collapse;
    border: 1px solid var(--card-border);
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .prose th,
  .prose td {
    padding: 0.75rem 1rem;
    text-align: left;
    border-bottom: 1px solid var(--card-border);
  }
  
  .prose th {
    background-color: var(--u-gray-100);
    font-weight: 600;
    color: var(--text);
  }
  
  .prose tr:last-child td {
    border-bottom: none;
  }
  
  .prose tr:nth-child(even) {
    background-color: var(--u-gray-100);
  }
  
  /* Images */
  .prose img {
    margin: 2rem 0;
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    max-width: 100%;
    height: auto;
  }
  
  .prose figure {
    margin: 2rem 0;
  }
  
  .prose figcaption {
    margin-top: 0.75rem;
    text-align: center;
    color: var(--text-light);
    font-size: 0.875rem;
    font-style: italic;
  }
  
  /* Definition lists */
  .prose dl {
    margin: 1.5rem 0;
  }
  
  .prose dt {
    font-weight: 600;
    color: var(--text);
    margin-top: 1rem;
  }
  
  .prose dd {
    margin-left: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--text-light);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .prose {
      font-size: 1rem;
    }
    
    .prose h1 {
      font-size: 1.875rem;
    }
    
    .prose h2 {
      font-size: 1.5rem;
    }
    
    .prose h3 {
      font-size: 1.25rem;
    }
    
    .prose p,
    .prose li {
      font-size: 1rem;
    }
    
    .prose p:first-of-type {
      font-size: 1.125rem;
    }
    
    .prose blockquote {
      padding: 1rem 0 1rem 1.5rem;
    }
    
    .prose pre {
      padding: 1rem;
      margin: 1.5rem 0;
    }
  }
  
  /* Print styles */
  @media print {
    .prose {
      color: black;
    }
    
    .prose h1,
    .prose h2,
    .prose h3,
    .prose h4,
    .prose h5,
    .prose h6 {
      color: black;
      page-break-after: avoid;
    }
    
    .prose blockquote {
      border-color: #666;
      page-break-inside: avoid;
    }
    
    .prose pre {
      page-break-inside: avoid;
    }
  }
</style>
